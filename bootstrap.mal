(def *host-language* "C++ // Custom types // Bootstrap")

; Utilities
(def not (fn (x) (if x false true)))
; (swap! v-atom func a1 a2 a3 ...) -> (reset! v-atom (func @v-atom a1 a2 a3 ...))
(def swap! (fn (at func & args) (reset! at (apply func (cons @at args)))))
(def cond (macro (& xs)
    (if (> (count xs) 0)
        (list 'if (first xs)
            (if (> (count xs) 1) (nth xs 1) (throw "odd number of forms to cond"))
            (cons 'cond (rest (rest xs)))))))
; ! WARNING: or & and can cause temporary memory leak due to caching the expression value
; in 'or-sym' & 'and-sym' respectively (this value will be overriden upon next call to the corresponding macro)
(def or (let* (or-sym (atom nil))
    (macro (& args) (if (empty? args) false `(do (reset! ~or-sym ~(first args)) (if @~or-sym @~or-sym (or ~@(rest args))))))))
(def and (let* (and-sym (atom nil))
    (macro (& args) (if (empty? args) true `(do (reset! ~and-sym ~(first args)) (if @~and-sym (and ~@(rest args)) @~and-sym))))))
(def last (fn (l) (if (empty? (rest l)) (first l) (last (rest l)))))
(def but-last (fn (l) (if (empty? (rest l)) ()
    (cons (first l) (but-last (rest l)))))) ; FIXME: Tail call optimization
(def map (fn (f l)
    (if (empty? l) l
        (cons (f (first l)) (map f (rest l)))))) ; FIXME: Tail call optimization

; This is the definition from the guide
; (apply-before Function A1 A2 A3 ... ARest) -> (apply Function (concat (list A1 A2 A3 ...) ARest))
(def apply-before (macro (F & args) `(apply ~F (concat ~(cons 'list (but-last args)) ~(last args)))))
; (apply-after Funcion Args A1 A2 A3 ...) -> (apply Function (concat Args (list A1 A2 A3 ...)))
(def apply-after (macro (F A & args) `(apply ~F (concat ~A ~(cons 'list args)))))
; Call a normal function like a macro (args are unevaluated)
; (macro-call func arg1 arg2 arg3 ...)
(def macro-call (macro (f & args) (apply (eval f) args)))
; Call a macro like a normal function
; (func-call func arg1 arg2 arg3 ...)
(def func-call (macro (f & args) `(apply ~f (list ~@args))))


(def nil? (fn (x) (= x nil)))
(def true? (fn (x) (= x true)))
(def false? (fn (x) (= x false)))
(def flist? (fn (x) (and (list? x) (not (empty? x)))))
(def fseq? (fn (x) (and (sequence? x) (not (empty? x)))))

; Experimental: MAL-defined quasiquote. Original S-expr definition: src/interpreter.cc:Interpreter/QuasiQuote()
(def cor-quasiquote (let* (
    cor-quasiquote (fn (expr)
        (if (flist? expr)
            (if (= (first expr) 'unquote)
                (nth expr 1)
                (if (and (flist? (first expr)) (= (first (first expr)) 'splice-unquote))
                    (list 'concat (nth (first expr) 1) (cor-quasiquote (rest expr)))
                    (list 'cons (cor-quasiquote (first expr)) (cor-quasiquote (rest expr)))))
            (list 'quote expr))))
    (macro (expr) (cor-quasiquote expr))))


(def *DEBUG* (atom false))
(def debug& (macro (ast) (if @*DEBUG* ast nil)))
(def dbg-log (macro (& msg) `(debug& (println ~@msg))))


; Redefine load-file
; Old definition:
; (def load-file (fn (fName) (eval (read-string (str "(do " (slurp fName) ")")))))
(def load-file (fn (fName)
    (eval (cons 'do (read-string (str "(" (slurp fName) ")"))))))

; Check if there's a program name passed to the executable
; Return -> true if enter REPL
(if (> (count *ARGV*) 1)
    ; Execute script
    (do
        (def *ARGV* (rest *ARGV*)) ; Skip exe name
        (load-file (first *ARGV*)) nil)
    ; Otherwise enter REPL
    true)